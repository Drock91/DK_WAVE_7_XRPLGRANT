"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XummPkce = void 0;
const debug_1 = require("debug");
const events_1 = require("events");
const xumm_sdk_1 = require("xumm-sdk");
const js_pkce_1 = __importDefault(require("js-pkce"));
localStorage.debug = "xummpkce*";
debug_1.debug.log = console.log.bind(console);
const log = (0, debug_1.debug)("xummpkce");
// If everything else fails:
// const log = (...args: any[]) => {
//   alert(args.map((a) => JSON.stringify(a, null, 2)).join(" "));
// };
log("Xumm OAuth2 PKCE Authorization Code Flow lib.");
class XummPkce extends events_1.EventEmitter {
    constructor(xummApiKey, redirectUrl) {
        var _a;
        super();
        this.popup = null;
        this.mobileRedirectFlow = false;
        this.pkce = new js_pkce_1.default({
            client_id: xummApiKey,
            redirect_uri: redirectUrl || document.location.href,
            authorization_endpoint: "https://oauth2.xumm.app/auth",
            token_endpoint: "https://oauth2.xumm.app/token",
            requested_scopes: "XummPkce",
            storage: localStorage,
        });
        window.addEventListener("message", (event) => {
            var _a;
            log("Received Event from ", event.origin);
            if (String((event === null || event === void 0 ? void 0 : event.data) || '').slice(0, 1) === "{" && String((event === null || event === void 0 ? void 0 : event.data) || '').slice(-1) === "}") {
                log("Got PostMessage with JSON");
                if (event.origin === "https://xumm.app" ||
                    event.origin === "https://oauth2.xumm.app") {
                    log("Got PostMessage from https://xumm.app / https://oauth2.xumm.app");
                    try {
                        const postMessage = JSON.parse(event.data);
                        if ((postMessage === null || postMessage === void 0 ? void 0 : postMessage.source) === "xumm_sign_request" &&
                            (postMessage === null || postMessage === void 0 ? void 0 : postMessage.payload)) {
                            log("Payload opened:", postMessage.payload);
                        }
                        else if ((postMessage === null || postMessage === void 0 ? void 0 : postMessage.source) === "xumm_sign_request_resolved" &&
                            (postMessage === null || postMessage === void 0 ? void 0 : postMessage.options)) {
                            // log("Payload resolved:", postMessage.options);
                            log("Payload resolved, mostmessage containing options containing redirect URL: ", postMessage);
                            this.pkce
                                .exchangeForAccessToken(postMessage.options.full_redirect_uri)
                                .then((resp) => {
                                this.jwt = resp.access_token;
                                if (resp === null || resp === void 0 ? void 0 : resp.error_description) {
                                    throw new Error(resp === null || resp === void 0 ? void 0 : resp.error_description);
                                }
                                // if (this.resolvePromise) {
                                //   this.resolvePromise({
                                //     jwt: this.jwt,
                                //     sdk: new XummSdkJwt(this.jwt),
                                //   });
                                // }
                                fetch("https://oauth2.xumm.app/userinfo", {
                                    headers: {
                                        Authorization: "Bearer " + resp.access_token,
                                    },
                                })
                                    .then((r) => r.json())
                                    .then((me) => {
                                    if (this.resolvePromise) {
                                        this.resolvePromise({
                                            jwt: resp.access_token,
                                            sdk: new xumm_sdk_1.XummSdkJwt(resp.access_token),
                                            me,
                                        });
                                    }
                                });
                                // Do stuff with the access token.
                            })
                                .catch((e) => {
                                if (this.rejectPromise) {
                                    this.rejectPromise((e === null || e === void 0 ? void 0 : e.error) ? new Error(e.error) : e);
                                }
                                log((e === null || e === void 0 ? void 0 : e.error) || e);
                            });
                        }
                        else if ((postMessage === null || postMessage === void 0 ? void 0 : postMessage.source) === "xumm_sign_request_rejected") {
                            log("Payload rejected", postMessage === null || postMessage === void 0 ? void 0 : postMessage.options);
                            if (this.rejectPromise) {
                                this.rejectPromise(new Error(((_a = postMessage === null || postMessage === void 0 ? void 0 : postMessage.options) === null || _a === void 0 ? void 0 : _a.error_description) ||
                                    "Payload rejected"));
                            }
                        }
                        else {
                            log("Unexpected message, skipping");
                        }
                    }
                    catch (e) {
                        log("Error parsing message", (e === null || e === void 0 ? void 0 : e.message) || e);
                    }
                }
            }
        }, false);
        const params = new URLSearchParams(((_a = document === null || document === void 0 ? void 0 : document.location) === null || _a === void 0 ? void 0 : _a.search) || "");
        if (params.get("authorization_code") || params.get("error_description")) {
            this.mobileRedirectFlow = true;
            this.urlParams = params;
            document.addEventListener("readystatechange", (event) => {
                if (document.readyState === "complete") {
                    log("(readystatechange: [ " + document.readyState + " ])");
                    this.handleMobileGrant();
                    this.emit("result");
                }
            });
        }
    }
    // Todo: document, e.g. custom flow, plugin
    authorizeUrl() {
        return this.pkce.authorizeUrl();
    }
    handleMobileGrant() {
        // log(document?.location?.search);
        if (this.urlParams && this.mobileRedirectFlow) {
            log("Send message event");
            const messageEventData = {
                data: JSON.stringify(this.urlParams.get("authorization_code")
                    ? {
                        source: "xumm_sign_request_resolved",
                        options: {
                            full_redirect_uri: document.location.href,
                        },
                    }
                    : {
                        source: "xumm_sign_request_rejected",
                        options: {
                            error: this.urlParams.get("error"),
                            error_code: this.urlParams.get("error_code"),
                            error_description: this.urlParams.get("error_description"),
                        },
                    }),
                origin: "https://oauth2.xumm.app",
            };
            // log(messageEventData);
            const event = new MessageEvent("message", messageEventData);
            window.dispatchEvent(event);
            return true;
        }
        return false;
    }
    authorize() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.mobileRedirectFlow) {
                const url = this.authorizeUrl();
                const popup = window.open(url, "XummPkceLogin", "directories=no,titlebar=no,toolbar=no,location=no,status=no," +
                    "menubar=no,scrollbars=no,resizable=no,width=600,height=790");
                this.popup = popup;
                log("Popup opened...", url);
            }
            this.promise = new Promise((resolve, reject) => {
                this.resolvePromise = resolve;
                this.rejectPromise = reject;
            });
            return this.promise;
        });
    }
    getPopup() {
        return this === null || this === void 0 ? void 0 : this.popup;
    }
}
exports.XummPkce = XummPkce;
