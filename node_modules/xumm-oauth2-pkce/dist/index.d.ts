/// <reference types="node" />
import { EventEmitter } from "events";
import { XummSdkJwt } from "xumm-sdk";
interface ResolvedFlow {
    sdk: XummSdkJwt;
    jwt: string;
    me: {
        sub: string;
        picture: string;
        account: string;
        name?: string;
        domain?: string;
        blocked: boolean;
        source: string;
        kycApproved: boolean;
        proSubscription: boolean;
    };
}
export interface XummPkceEvent {
    result: () => void;
}
export declare interface XummPkce {
    on<U extends keyof XummPkceEvent>(event: U, listener: XummPkceEvent[U]): this;
    off<U extends keyof XummPkceEvent>(event: U, listener: XummPkceEvent[U]): this;
}
export declare class XummPkce extends EventEmitter {
    private pkce;
    private popup;
    private jwt?;
    private resolvePromise?;
    private rejectPromise?;
    private promise?;
    private mobileRedirectFlow;
    private urlParams?;
    constructor(xummApiKey: string, redirectUrl?: string);
    authorizeUrl(): string;
    private handleMobileGrant;
    authorize(): Promise<ResolvedFlow>;
    getPopup(): Window | null | undefined;
}
export {};
